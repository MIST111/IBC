use std::collections::HashMap;

// The SortByKey trait defines a method for sorting the elements in a HashMap by their key values.
trait SortByKey {
  // The sort_by_key() method takes no arguments and returns a new instance of the HashMap struct with the elements sorted by their key values.
  fn sort_by_key(&self) -> Self;
}

// The implementation of the SortByKey trait for the HashMap struct sorts the elements in the map by their key values in ascending order.
impl<K, V> SortByKey for HashMap<K, V>
where
  K: Ord,
{
  // This implementation uses the into_iter() method to convert the HashMap struct to an iterator.
  // The iterator is then passed to the sort_by() method, which sorts the elements in ascending order by their key values.
  // The sorted elements are then converted back to a HashMap struct using the into_map() method.
  fn sort_by_key(&self) -> Self {
    self.into_iter().collect::<Vec<_>>().sort_by(|a, b| a.0.cmp(&b.0)).into_map()
  }
}

// The main function of the program creates a new instance of the HashMap struct, adds several key-value pairs to it, and then sorts the elements in the map by their keys.
fn main() {
  // Create a new HashMap struct.
  let mut map = HashMap::new();

  // Add some key-value pairs to the map.
  map.insert("a", 1);
  map.insert("b", 2);
  map.insert("c", 3);

  // Sort the map by its keys.
  let sorted_map = map.sort_by_key();

  // Iterate over the sorted map and print the key and value of each element.
  for (key, value) in sorted_map {
    println!("{}: {}", key, value);
  }
}
